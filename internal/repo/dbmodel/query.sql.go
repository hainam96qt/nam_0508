// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: query.sql

package db

import (
	"context"
	"database/sql"
	"encoding/json"
)

const createImage = `-- name: CreateImage :exec
INSERT INTO images (
    user_id,
    path,
    metadata
) VALUES (?,?,?)
`

type CreateImageParams struct {
	UserID   sql.NullInt32   `json:"user_id"`
	Path     sql.NullString  `json:"path"`
	Metadata json.RawMessage `json:"metadata"`
}

func (q *Queries) CreateImage(ctx context.Context, arg CreateImageParams) error {
	_, err := q.db.ExecContext(ctx, createImage, arg.UserID, arg.Path, arg.Metadata)
	return err
}

const createUser = `-- name: CreateUser :exec
INSERT INTO users (
    user_name,
    password
) VALUES (?,?)
`

type CreateUserParams struct {
	UserName sql.NullString `json:"user_name"`
	Password sql.NullString `json:"password"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) error {
	_, err := q.db.ExecContext(ctx, createUser, arg.UserName, arg.Password)
	return err
}

const getImage = `-- name: GetImage :one
SELECT id, user_id, path, metadata FROM images where id = ? LIMIT 1
`

func (q *Queries) GetImage(ctx context.Context, id int32) (Image, error) {
	row := q.db.QueryRowContext(ctx, getImage, id)
	var i Image
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Path,
		&i.Metadata,
	)
	return i, err
}

const getUser = `-- name: GetUser :one
SELECT id, user_name, password FROM users where user_name = ? LIMIT 1
`

func (q *Queries) GetUser(ctx context.Context, userName sql.NullString) (User, error) {
	row := q.db.QueryRowContext(ctx, getUser, userName)
	var i User
	err := row.Scan(&i.ID, &i.UserName, &i.Password)
	return i, err
}
