// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.19.1
// source: query.sql

package db

import (
	"context"
	"database/sql"
)

const createPurchase = `-- name: CreatePurchase :exec
INSERT INTO purchases (
    wager_id,
    buying_price
) VALUES (?,?)
`

type CreatePurchaseParams struct {
	WagerID     int32   `json:"wager_id"`
	BuyingPrice float64 `json:"buying_price"`
}

func (q *Queries) CreatePurchase(ctx context.Context, arg CreatePurchaseParams) error {
	_, err := q.db.ExecContext(ctx, createPurchase, arg.WagerID, arg.BuyingPrice)
	return err
}

const createWager = `-- name: CreateWager :exec
INSERT INTO wagers (
    id,
    total_wager_value,
    odds,
    selling_percentage,
    selling_price,
    current_selling_price,
    percentage_sold,
    amount_sold
) VALUES (?,?,?,?,?,?,?,?)
`

type CreateWagerParams struct {
	ID                  int32         `json:"id"`
	TotalWagerValue     int32         `json:"total_wager_value"`
	Odds                int32         `json:"odds"`
	SellingPercentage   int32         `json:"selling_percentage"`
	SellingPrice        float64       `json:"selling_price"`
	CurrentSellingPrice float64       `json:"current_selling_price"`
	PercentageSold      sql.NullInt32 `json:"percentage_sold"`
	AmountSold          sql.NullInt32 `json:"amount_sold"`
}

func (q *Queries) CreateWager(ctx context.Context, arg CreateWagerParams) error {
	_, err := q.db.ExecContext(ctx, createWager,
		arg.ID,
		arg.TotalWagerValue,
		arg.Odds,
		arg.SellingPercentage,
		arg.SellingPrice,
		arg.CurrentSellingPrice,
		arg.PercentageSold,
		arg.AmountSold,
	)
	return err
}

const getPurchase = `-- name: GetPurchase :one
SELECT id, wager_id, buying_price, created_at, updated_at FROM purchases where id = ? LIMIT 1
`

func (q *Queries) GetPurchase(ctx context.Context, id int32) (Purchase, error) {
	row := q.db.QueryRowContext(ctx, getPurchase, id)
	var i Purchase
	err := row.Scan(
		&i.ID,
		&i.WagerID,
		&i.BuyingPrice,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getWager = `-- name: GetWager :one
SELECT id, total_wager_value, odds, selling_percentage, selling_price, current_selling_price, percentage_sold, amount_sold, created_at, updated_at FROM wagers WHERE id = ?
`

func (q *Queries) GetWager(ctx context.Context, id int32) (Wager, error) {
	row := q.db.QueryRowContext(ctx, getWager, id)
	var i Wager
	err := row.Scan(
		&i.ID,
		&i.TotalWagerValue,
		&i.Odds,
		&i.SellingPercentage,
		&i.SellingPrice,
		&i.CurrentSellingPrice,
		&i.PercentageSold,
		&i.AmountSold,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getWagerForUpdate = `-- name: GetWagerForUpdate :one
SELECT id, total_wager_value, odds, selling_percentage, selling_price, current_selling_price, percentage_sold, amount_sold, created_at, updated_at FROM wagers WHERE id = ? FOR UPDATE
`

func (q *Queries) GetWagerForUpdate(ctx context.Context, id int32) (Wager, error) {
	row := q.db.QueryRowContext(ctx, getWagerForUpdate, id)
	var i Wager
	err := row.Scan(
		&i.ID,
		&i.TotalWagerValue,
		&i.Odds,
		&i.SellingPercentage,
		&i.SellingPrice,
		&i.CurrentSellingPrice,
		&i.PercentageSold,
		&i.AmountSold,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const lastInsertID = `-- name: LastInsertID :one
select last_insert_id()
`

func (q *Queries) LastInsertID(ctx context.Context) (int64, error) {
	row := q.db.QueryRowContext(ctx, lastInsertID)
	var last_insert_id int64
	err := row.Scan(&last_insert_id)
	return last_insert_id, err
}

const listWagers = `-- name: ListWagers :many
SELECT id, total_wager_value, odds, selling_percentage, selling_price, current_selling_price, percentage_sold, amount_sold, created_at, updated_at FROM wagers LIMIT ? OFFSET ?
`

type ListWagersParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListWagers(ctx context.Context, arg ListWagersParams) ([]Wager, error) {
	rows, err := q.db.QueryContext(ctx, listWagers, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Wager
	for rows.Next() {
		var i Wager
		if err := rows.Scan(
			&i.ID,
			&i.TotalWagerValue,
			&i.Odds,
			&i.SellingPercentage,
			&i.SellingPrice,
			&i.CurrentSellingPrice,
			&i.PercentageSold,
			&i.AmountSold,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updatePurchaseWager = `-- name: UpdatePurchaseWager :exec
UPDATE wagers SET current_selling_price = ?, percentage_sold = ?, amount_sold = ? WHERE id = ?
`

type UpdatePurchaseWagerParams struct {
	CurrentSellingPrice float64       `json:"current_selling_price"`
	PercentageSold      sql.NullInt32 `json:"percentage_sold"`
	AmountSold          sql.NullInt32 `json:"amount_sold"`
	ID                  int32         `json:"id"`
}

func (q *Queries) UpdatePurchaseWager(ctx context.Context, arg UpdatePurchaseWagerParams) error {
	_, err := q.db.ExecContext(ctx, updatePurchaseWager,
		arg.CurrentSellingPrice,
		arg.PercentageSold,
		arg.AmountSold,
		arg.ID,
	)
	return err
}
